#!/usr/bin/env python3

import subprocess
import argparse
import sys

HEADER = """
                          __   _,--="=--,_   __
                         /  \."    .-.    "./  \\
                        /  ,/  _   : :   _  \/` \\
                        \  `| /o\  :_:  /o\ |\__/
                         `-'| :="~` _ `~"=: |
                            \`     (_)     `/
                     .-"-.   \      |      /   .-"-.
.-------------------{     }--|  /,.-'-.,\  |--{     }------------------.
|                   (_)_)_)  \_/`~-===-~`\_/  (_(_(_)                  |
|                                                                      |
:                          Launching a VM ...                          :
                                                                        """

FOOTER = ""


class Publish:

    @staticmethod
    def parse(publish):
        ports_and_protocol = publish.split('/')

        ports = ports_and_protocol.pop(0)

        host_and_guest_ports = ports.split(':')
        host_port = host_and_guest_ports.pop(0)

        # If guest port is not defined, default to host port.
        if host_and_guest_ports:
            guest_port = host_and_guest_ports.pop(0)
        else:
            guest_port = host_port

        # If protocol is not specified, default to TCP:
        if ports_and_protocol:
            protocol = ports_and_protocol.pop(0)
        else:
            protocol = "tcp"

        return Publish(protocol, host_port, guest_port)

    def __init__(self, protocol, host_port, guest_port):
        self.protocol = protocol
        self.host_port = host_port
        self.guest_port = guest_port


class Qemu:
    GDB_PORT = 1234

    def __init__(self, qemu_exec):
        self.qemu_exec = qemu_exec
        self.opts = ["-enable-kvm", "-cpu", "host,+x2apic", "-nographic", "-no-reboot"]

    def configure_cpus(self, cpus):
        self.cpus = cpus

        self.opts += ["-smp", "cpus=%d" % (cpus)]

    def configure_image(self, image):
        self.image = image

        self.opts += ["-cdrom", image]

    def configure_publish(self, publish_list):
        self.publish = []
        for publish in publish_list:
            self.publish += [Publish.parse(publish)]

    def configure_trace(self, trace_list):
        for trace in trace_list:
            self.opts += ["-trace", "enable=%s" % trace]

    def configure_net(self, network):
        self.network = network
        if network == "user":
            hostfwds = []
            for publish in self.publish:
                hostfwds += ["%s::%s-:%s" %
                             (publish.protocol, publish.host_port, publish.guest_port)]

            net = "user,id=net0"
            if hostfwds:
                net += ",hostfwd=" + ",hostfwd=".join(hostfwds)

            device = "virtio-net-pci,netdev=net0,disable-modern=off,disable-legacy=on"

            self.opts += ["-netdev", net]
            self.opts += ["-device", device]

    def configure_net_dump(self, filename):
        if filename:
            self.opts += ["-object",
                          "filter-dump,id=filter0,netdev=net0,file=%s" % filename]

    def configure_gdb(self, debug):
        self.debug = debug
        if self.debug:
            self.opts += ["-gdb", "tcp::1234", "-S"]

    def run(self, dry_run=False):
        print(HEADER)
        print(" Image: '%s'" % (self.image))
        print(" Network: %s" % (self.network))
        if self.publish:
            print(" Ports:")
            print("  %-5s %10s %10s" % ("proto", "host", "guest"))
            print("  %-5s %10s %10s" % ("-----", "----", "-----"))
            for publish in self.publish:
                print("  %-5s %10s %10s" % (publish.protocol,
                                            str(publish.host_port), str(publish.guest_port)))
        else:
            print(" Ports: none")
        print(FOOTER)
        if self.debug:
            print("QEMU is waiting for gdb to connect to %s:%d ..." %
                  ('localhost', Qemu.GDB_PORT))
        cmdline = [self.qemu_exec] + self.opts
        if dry_run:
            print(" ".join(cmdline))
        else:
            ret = subprocess.call(cmdline)
            if ret != 0:
                sys.exit("qemu failed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("image", help="OS image to run in a virtual machine")
    parser.add_argument("-c", "--cpus", type=int, default=1,
                        help="number of CPUs in the virtual machine")
    parser.add_argument("-n", "--network", type=str, default="user",
                        help="enable networking. Supported values: 'user' and 'none'.")
    parser.add_argument("--network-dump", metavar="FILENAME", type=str,
                        help="Dump network traffic to a file in pcap format.")
    parser.add_argument("-p", "--publish", type=str, default=[], action="append",
                        help="publish VM ports to the host. Format: <host port>:<guest port>/<protocol>")
    parser.add_argument("-d", "--debug", action="store_true",
                        help="enable gdb support with QEMU")
    parser.add_argument("-t", "--trace", type=str, default=[], action="append",
                        help="enable tracepoints")
    parser.add_argument("--dry-run", action="store_true",
                        help="display actions without running them")
    parser.add_argument("--qemu-exec", type=str, default="qemu-system-x86_64",
                        help="QEMU executable to launch VM with")
    args = parser.parse_args()

    qemu = Qemu(args.qemu_exec)
    qemu.configure_cpus(args.cpus)
    qemu.configure_image(args.image)
    qemu.configure_publish(args.publish)
    qemu.configure_trace(args.trace)
    qemu.configure_net(args.network)
    qemu.configure_net_dump(args.network_dump)
    qemu.configure_gdb(args.debug)
    qemu.run(args.dry_run)
